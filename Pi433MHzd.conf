# /etc/Pi433MHzd.conf, configuration for Pi433MHzd
# a daemon for transmitting and reveicing 433 MHz domotics commands on a raspbery pi

# General Settings

# Set loglevel to None, Normal (on errors and warnings, default), Debug (for developers)
LOGLEVEL=Normal

# File to write logging output to (/var/log/Pi433HMzd.log by default)
LOGFILE=/var/log/Pi433MHzd.log

# Port to communicate over with clients (51721 by default, change when port is in use)
PORT=51721

# Maximum number of clients (5 by default)
MAXCLIENTS=5

# Receiver Settings

# Type of device to communicate with
# off: don't use receiver
# echo: echoing some signal for internal testing
# raw: return raw signal (default, to be used when transmitter is not in the list. User can record the code and decide in own software)
# action: return action devices decoded signal (sold in the netherlands)
# blokker: return blokker devices decoded signal (sold in the netherlands)
# kaku: return kaku devices decoded signal (sold in the netherlands)
# elro: return elro devices decoded signal (sold in the netherlands)
RXDEVICE=elro

# The number of times the same code must be received in a row before it is returned (3 by default)
RXREPEATS=3

# GPIO pin to use on raspberry pi to receive data (3 by default)
RXGPIO=3

# Queue length, the number of commands that are buffered with slow communication to clients (5 by default).
RXQUEUE=5

# Echo RX when transmitting via RF channel (0 by default).
# If 0 Rx is disabled during transmitting, if 1 Rx stays enabled during transmitting
RXECHO=0

# Ignore repeats of the same signal for xxx milleseconds (500 by default).
# If 0 repeats won't be ignored
RXIGNRPTS=500

# Transmitter Settings

# Type of device to communicate with
# off: don't use transmitter
# echo: echoing some signal for internal testing
# raw: send raw signal (default, to be used when receiver is not in the list. User can record the code and decide in own software)
# action: send action devices decoded signal (sold in the netherlands)
# blokker: send blokker devices decoded signal (sold in the netherlands)
# kaku: send kaku devices decoded signal (sold in the netherlands)
# elro: send elro devices decoded signal (sold in the netherlands)
TXDEVICE=elro

# [0..511] Duration of one period, in microseconds. A trit is 6 periods. Use 0 for default
# echo, default = NA
# raw, default = 320
# action, default = 190
# blokker, default = 230
# kaku, default = 375
# elro, default = 320
TXPERIOD=0

# [0..7] The 2log-Number of times the signal is repeated (4 by default).
# The actual number of repeats will be 2^repeats. 2 would be bare minimum, 4 seems robust.
TXREPEATS=4

# GPIO pin on raspberry pi to which the transmitter is connected (2 by default)
TXGPIO=2

# Queue length, the number of commands that are buffered when busy sending to previous command (5 by default).
TXQUEUE=5

# Control Signals Settings

# For some transceivers (like Aurel RTX-MID-xV) switching from Tx to Rx can be speed up by quickly charge/ discharge the PLL circuit.
# For this procedure to work, TXRXGPIO and ENABLEGPIO need to be enabled. See the datasheet for more information.
# If 0 the PLL charge/ discharge procedure is disabled, if 1 this procedure is enabled
PLLCHARGE=0

# GPIO pin on raspberry pi to switch from TX to RX and vice versa on transceivers. 
# Make 0 to disable or if you are using separate transmitters and receivers (27 by default)
TXRXGPIO=27

# GPIO pin on raspberry pi to enable the transceiver (or transmitter or receiver if applicable) 
# Make 0 to disable (22 by default)
ENABLEGPIO=22
